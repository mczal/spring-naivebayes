server.contextPath=/bayes

hadoop.run.training=/Users/Shared/hadoop/bin/hadoop jar /Users/mczal/Projects/MapReduce-workspace/mapreduce-naivebayes-training/target/mapreduce-1.0-SNAPSHOT.jar mczal.bayes.App
hadoop.run.testing=/Users/Shared/hadoop/bin/hadoop jar /Users/mczal/Projects/MapReduce-workspace/mapreduce-naivebayes-testing/target/testing-1.0-SNAPSHOT.jar App
hadoop.properties=/Users/mczal/Projects/MapReduce-workspace/application.properties

hdfs.authority=hdfs://localhost:7500

# Regex for info file
hdfs.input.regex=,

# k = laplacian smoothing addition count
k.count=1

spring.http.multipart.max-file-size=1000MB
spring.http.multipart.max-request-size=1000MB

#PostgreSQL Conf
#spring.datasource.url= jdbc:postgresql://localhost:5432/naive-pg
#spring.datasource.username=postgres
#spring.datasource.password=Fahrizalsss123

# DataSource settings: set here your own configurations for the database
# connection. In this example we have "hadoop_db" as database name and
# "root" as username and password.
spring.datasource.url=jdbc:mysql://localhost:8889/hadoop_db
spring.datasource.username=root
spring.datasource.password=root

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# Show or not log for each sql query
#spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

